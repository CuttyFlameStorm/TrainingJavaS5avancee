package polimorphisme;

public class Application {

	public static void main(String[] args) {
		Pomme p = new Pomme(40);
		Orange o = new Orange(50);
		
		Fruit f = new Pomme(50); // ceci est un "SUR-CASTING" implicite !  de class.
		Fruit f2 = (Fruit) new Orange(50); // ceci est appelé un SUR-CASTING explicite! de class.
		// les 2 mode d'ecriture sont identique.
		// ** mais après un SUR-CASTING, si on a besoin 
		// d'aller chercher une méthode de la class Pomme :
		// il faudra effectuer un " SOUS-CASTING" !
		// exemple il faut le faire comme ceci:
		((Pomme)f).affichePoids();  //la méthode affichePoids() ne se trouve pas dans la class abstraite Fruit. donc il faut aller chercher la méthode qui se trouve dans la claas Pomme de cette faocon.
		// ceci est appelé un SOUS-CASTING !
		((Orange)f2).affichePoids();
		f.affiche();
		f2.affiche(); // le phenomene du let binding à compris que nous souhaiton la méthode de Orange , cela fonctionne car la méthode existe dans Fruits, donc il y a un SOUS-CASTING qui s'effectue implictement. Le polymorphisme s'applique avec le LET BIDING lorsque la méthode existe aussi dans la classe abstraite.
		
		//autre exemple avec un tableau :
		//declaration d'un tableau de Fruit :
		Fruit[]fruits = new Fruit[4];  // avec cette méthode on doit définir à l'avance le nombre de ligne du tableau.
		fruits[0] = new Pomme(50);  // ici rappel de SUR-CASTING implicite !
		fruits[1] = (Fruit) new Orange(60); //ici le SUR CASTING est explicite !
		fruits[2] = new Pomme(90);
		fruits[3] = new Orange(100);
		//utiiisons l'ancienne méthode d'itération
		for(int i=0;i<fruits.lenght;i++) {
			System.out.println(fruits[i]);
		}
		
		

	}

}
